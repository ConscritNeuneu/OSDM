#decision: it seems the mvp approach is an issue for ERA. On the other hand, the deadline cannot be met on full spec scope => ?
openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
  - description: fsm dummy server
    url: https://virtserver.swaggerhub.com/Real-IT/FSM_MVP/1.0.0
info:
  version: 1.0.0
  title: UIC 90918-10 - FSM
  description: >
    ## Overview
   
    Specifications for the OSDM API standard.
   
    ## References
   
   
  contact:
    name: UIC
    url: 'https://www.uic.org'
    email: uic@uic.org
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
   
tags:
  - name: Journey
    description: functionalities related to timetable-only information
  - name: Offers
    description: funcitonalities related to the exposure and selection of bookable offers
  - name: Passengers
    description: allows manipulating passengers informations at every stage of the flow
  - name: Products
    description: allows retrieving Products information on one or more products
paths:
  /locations:
    get:
      tags:
        - Journey
      summary: allows looking up matching station for a given match value based on MatchType
      operationId: getLocations
      description: allows to build a lookup functionality to get station codes based on whatever is known of the station
      parameters:
        - name: Accept-Language
          in: header
          description:
             Describes the set of natural languages that are preferred as a response to the request (see RFC2616-sec14.4). The response header will set "Content-Language" concerning the content (supported languages and fallback-language , depends on underlyling system).
          schema:
            type: string
          required: false
        - name: matchValue
          in: query
          schema:
            type: string
          required: true
       
        - name: matchType
          in: query
          description:
            Defines the search token type in matchValue (TEXT for names; ANY_CODE fallbacks to the code supported by the underlyling system (like UIC, EVA or RESARAIL); UIC/EVA/RESARAIL forces stations defined by the appropriate code-system explicitely (national aspect); COORDS given as "lat,lon").
          required: true
          schema:
            type: string
            default: NAME
            enum:
            - NAME     # station name
            - ANY_CODE # use if caller does not know default code of underlyling system
            - CODELIST
            - COORDS
          # Future use: ADDRESS_OR_POI
        - name: matchCodeList
          in: query
          description:
            in case matchvalue is codelist, the codelist to search into
          schema:
            type: string
          required: false
        - name: countryCode
          in: query
          description: Search locations for a specific country (ISO 3166, 2-digits). Meant for autocomplete functionalty. A separate endpoint or channel would be provided for mass downloads
          required: false
          schema:
            type: string
            example: CH
        - name: limit
          in: query
          description:
            The number of locations to be returned ([1..50]).
          required: false
          schema:
            type: number
            default: 10
      responses:
        '200':
          description: the set of stations matching the provided input
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/locationRef'
        '400':
          description: bad input parameter
  /location/{id}:
    get:
      tags:
        - Journey
      summary: retrieves a location element
      operationId: getLocation
      description: allows to retrieve a complete description
      parameters:
        - in: path
          name: id
          schema:
             type: string
             format: uuid
             example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description:
            ID of the trip to get.
       
      responses:
        '200':
          description: the set of stations matching the provided input
          headers:
            Cache-Control:
              schema:
                type: string
                default:  "public, max-age=43200"  
                description: indicates if and how long the resource can be cached
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/location'
        '400':
          description: bad input parameter
  /trip/{id}:
    get:
      tags:
        - Journey
      summary: retrieves a trip element
      parameters:
        - in: path
          name: id
          schema:
             type: string
             format: uuid
             example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description:
            ID of the trip to get.
        - in: query
          name: stopBehaviour
          description:
            Influences what stops are to be returned in response
            (ORIGIN_DESTINATION_ONLY returns no intermediate stops;
            REAL_BOARDING_ALIGHTING returns all stops except virtual stops).
          schema:
            type: string
            default: ORIGIN_DESTINATION_ONLY
            enum:
            - ORIGIN_DESTINATION_ONLY # returns only origin and destination stops (Hafas::passingPoints=false)
            - REAL_BOARDING_ALIGHTING # returns   only stops where a customer may step in/out of the transport-product (Hafas: passingPoints=true;showPassingPoints=false)
            #- ALL_BOARDING_ALIGHTING  future use: virtual stops
      operationId: getTrip
      description: retrieves a trip element representing a train travel made of one or more segments
      responses:
        '200':
          description: the requested trip
          content:
            application/json:
              schema:
              #decision: should we mark a schema as resource by naming convention (ex: Res prefix) ?
                $ref: '#/components/schemas/tripDef'
        '400':
          description: bad input parameter
  /tripsCollection/{id}:
    get:
      tags:
          - Journey
      summary:
        The tripsCollection service returns different trips for
        a specified origin and destination (and via).
        The unique codes of the origin and destination can be resolved using the locations service.
      operationId: getTripsCollection
      parameters:
        - in: path
          name: id
          schema:
             type: string
             format: uuid
             example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description:
            ID of the trip to get.      
        - name: Accept-Language
          in: header
          description:
           Describes the set of natural languages that are preferred as a response to the request (see RFC2616-sec14.4).
           The response header will set "Content-Language" concerning the content
           (supported languages and fallback-language, depends on underlyling system).
          schema:
            type: string
          required: false
        - name: scrollContext
          in: header
          description:
             Based on a previous search-response, earlier or later connections for the same   trip can be retrieved
             by scrolling back and forth (by a pointer-context). You must use the same request parameters as in the original
               trips-request and the given values in the response for either "scrollBackContext" or "scrollForwardContext" for optional scrolling.
          schema:
            type: string
          required: false
      responses: # see "Error-Handling.md" for HttpStatus 4xx, 5xx
        '200':
          description: Trip(s) found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tripsCollection'
          headers:
            Content-Language:
              schema:
                type: string
                description: The language of translatable strings in the response (see RFC2616-sec14.12).
        '204': # see ResponseBody_204.json
          description: No trip(s) found
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '415':
          description: Unsupported Media type # must be "application/json"
        '500':
          description: Internal server error
        '501':
          description: Not implemented
  /tripsCollection:
    post:
      tags:
        - Journey
      summary:
        The tripsCollection service returns different trips for a specified origin
        and destination (and via). The unique codes of the origin and
        destination can be resolved using the locations service.
      operationId: getTripsUsingGET
      parameters:
        - name: Accept-Language
          in: header
          description:
             Describes the set of natural languages that are preferred as a response to the request (see RFC2616-sec14.4).
             The response header will set "Content-Language" concerning the content
             (supported languages and fallback-language, depends on underlyling system).
          schema:
            type: string
          required: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tripSearchCriteria'
      responses: # see "Error-Handling.md" for HttpStatus 4xx, 5xx
        '200':
          description: Trip(s) found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tripsCollection'
          headers:
            Content-Language:
              schema:
                type: string
                description: The language of translatable strings in the response (see RFC2616-sec14.12).
        '204': # see ResponseBody_204.json
          description: No trip(s) found
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '415':
          description: Unsupported Media type # must be "application/json"
        '500':
          description: Internal server error
        '501':
          description: Not implemented
  /tripOffersCollection/{id}:
    get:
      tags:
          - Offers
      summary:
        The tripOffersCollection service returns different offes and trips for
        a specified origin and destination (and via).
        The unique codes of the origin and destination can be resolved using the locations service.
      operationId: getTripOffersCollection
      parameters:
        - in: path
          name: id
          schema:
             type: string
             format: uuid
             example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description:
            ID of the trip to get.      
        - name: Accept-Language
          in: header
          description:
           Describes the set of natural languages that are preferred as a response to the request (see RFC2616-sec14.4).
           The response header will set "Content-Language" concerning the content
           (supported languages and fallback-language, depends on underlyling system).
          schema:
            type: string
          required: false
        - name: scrollContext
          in: header
          description:
             Based on a previous search-response, earlier or later connections for the same   trip can be retrieved
             by scrolling back and forth (by a pointer-context). You must use the same request parameters as in the original
               trips-request and the given values in the response for either "ScrollBack-Context" or "ScrollForward-Context" for optional scrolling.
          schema:
            type: string
          required: false
      responses: # see "Error-Handling.md" for HttpStatus 4xx, 5xx
        '200':
          description: Trip(s) found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tripOffersCollection'
          headers:
            Content-Language:
              schema:
                type: string
                description: The language of translatable strings in the response (see RFC2616-sec14.12).
        '204': # see ResponseBody_204.json
          description: No trip(s) found
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '415':
          description: Unsupported Media type # must be "application/json"
        '500':
          description: Internal server error
        '501':
          description: Not implemented  
  /tripOffersCollection:
    post:
      tags:
        - Offers
      summary:
        The tripsCollection service returns different trips for a specified origin
        and destination (and via). The unique codes of the origin and
        destination can be resolved using the locations service.
      operationId: getOffersUsingGET
      parameters:
        - name: Accept-Language
          in: header
          description:
             Describes the set of natural languages that are preferred as a response to the request (see RFC2616-sec14.4).
             The response header will set "Content-Language" concerning the content
             (supported languages and fallback-language, depends on underlyling system).
          schema:
            type: string
          required: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tripOfferRequest'
      responses: # see "Error-Handling.md" for HttpStatus 4xx, 5xx
        '200':
          description: Trip(s) found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tripOffersCollection'
          headers:
            Content-Language:
              schema:
                type: string
                description: The language of translatable strings in the response (see RFC2616-sec14.12).
        '204': # see ResponseBody_204.json
          description: No trip(s) found
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '415':
          description: Unsupported Media type # must be "application/json"
        '500':
          description: Internal server error
        '501':
          description: Not implemented
  /tripOffer/{id}:
    get:
      tags:
        - Offers
      summary:
        The tripOffer service returns different offes and trips for
        a specified origin and destination (and via).
        The unique codes of the origin and destination can be resolved using the locations service.
      operationId: getTripOffer
      parameters:
        - in: path
          name: id
          schema:
             type: string
             format: uuid
             example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description:
            ID of the trip to get.
      responses: # see "Error-Handling.md" for HttpStatus 4xx, 5xx
        '200':
          description: TripOffer found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tripOffer'
          headers:
            Content-Language:
              schema:
                type: string
                description: The language of translatable strings in the response (see RFC2616-sec14.12).
        '204': # see ResponseBody_204.json
          description: No trip(s) found
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '415':
          description: Unsupported Media type # must be "application/json"
        '500':
          description: Internal server error
        '501':
          description: Not implemented              
  /offer/{id}:
    get:
      tags:
        - Offers
      summary:
        The tripOffer service returns different offes and trips for
        a specified origin and destination (and via).
        The unique codes of the origin and destination can be resolved using the locations service.
      operationId: getOffer
      parameters:
        - in: path
          name: id
          schema:
             type: string
             format: uuid
             example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description:
            ID of the trip to get.
      responses: # see "Error-Handling.md" for HttpStatus 4xx, 5xx
        '200':
          description: TripOffer found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offer'
          headers:
            Content-Language:
              schema:
                type: string
                description: The language of translatable strings in the response (see RFC2616-sec14.12).
        '204': # see ResponseBody_204.json
          description: No trip(s) found
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '415':
          description: Unsupported Media type # must be "application/json"
        '500':
          description: Internal server error
        '501':
          description: Not implemented              
  /passenger/{id}:
    get:
      tags:
        - Passengers
      summary:
        The get passenger service returns the information on the passenger with the id provided
      operationId: getPassenger
      parameters:
        - in: path
          name: id
          schema:
             type: string
             format: uuid
             example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description:
            ID of the passenger to get.
      responses: # see "Error-Handling.md" for HttpStatus 4xx, 5xx
        '200':
          description: Passenger found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/passenger'
          headers:
            Content-Language:
              schema:
                type: string
                description: The language of translatable strings in the response (see RFC2616-sec14.12).
        '204': # see ResponseBody_204.json
          description: No passenger(s) found
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '415':
          description: Unsupported Media type # must be "application/json"
        '500':
          description: Internal server error
        '501':
          description: Not implemented                      
    patch:
      tags:
        - Passengers
      summary:
        The patch passenger service allows updating a passenger Information
      operationId: patchPassenger
      parameters:
        - in: path
          name: id
          schema:
             type: string
             format: uuid
             example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description:
            ID of the passenger to get.
      responses: # see "Error-Handling.md" for HttpStatus 4xx, 5xx
      #decision: should puts and patches just return an ok or should they return the updated resource
        '200':
          description: Passenger found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/passenger'
          headers:
            Content-Language:
              schema:
                type: string
                description: The language of translatable strings in the response (see RFC2616-sec14.12).
        '204': # see ResponseBody_204.json
          description: No passenger(s) found
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '415':
          description: Unsupported Media type # must be "application/json"
        '500':
          description: Internal server error
        '501':
          description: Not implemented
  /product/{id}:
    get:
      tags:
        - Products
      summary:
        The get product service returns the information on the product with the id provided
      operationId: getProduct
      parameters:
        - in: path
          name: id
          schema:
             type: string
             format: uuid
             example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description:
            ID of the product to get.
      responses: # see "Error-Handling.md" for HttpStatus 4xx, 5xx
        '200':
          description: Product found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/product'
          headers:
            Content-Language:
              schema:
                type: string
                description: The language of translatable strings in the response (see RFC2616-sec14.12).
        '204': # see ResponseBody_204.json
          description: No passenger(s) found
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '415':
          description: Unsupported Media type # must be "application/json"
        '500':
          description: Internal server error
        '501':
          description: Not implemented                      
components:
  schemas:
    link:
      type: object
      required:
        - contentTypes
        - href
        - relation
      properties:
        contentTypes:
          type: array
          example: '["application/json", "application/pdf"]'
          description: Possible content types of the resource.
          items:
            type: string
        href:
          type: string
          format: uri
          description: URL to the linked resource (no parameters needed).
          example: https://www.brussels.info/train-stations/
        method:
          type: string
          example: GET
          description: HTTP method to call the action
        relation:
          type: string
          example: Get Map
          description: Relation of this link to the current entity.
        version:
          type: integer
          format: int32
          example: 1
          description: Version of the current relation.
      description:
        The underlying system may provide additional links pointing
        on further information (such as HTML download links, websites or extended APIs).
        Mechanism to add flexible extensions specific to an underlying system.  
    #decision: should segments be a standalone resource or a data structure. general question: how radical should we go with the everything is a resource approach ?
    #proposition is to act on case by case and only make resources where relevant
    #in this case: data structure
    segment:
      type: object
      properties:
        index:
          type: integer
        origin:
          $ref: '#/components/schemas/locationRef'
        destination:
          $ref: '#/components/schemas/locationRef'
        seqId:
          description: ordering of the trains
          type: number
        transfer:
          description: Transfer to the next vehicle not included in the request
          type: object
          properties:
            duration:
              description: duration forseen as transfer to the next section
              type: number
            transferType:
              description: 'WALK,...'
              type: string
          required:
            - duration
            - transferType
          additionalProperties: false
        vehicle:
          type: object
          properties:
            number:
              description: 'id of the vehicle, In case of two train s running in parallel there might be two train numbers.'
              type: array
              items:
                type: string
            line:
              description: line number in case the vehical does not have a number
              type: string
            serviceBrand:
              $ref: '#/components/schemas/serviceBrandCodeDef'
            transportMode:
              description: 'transport mode (code list of MERITS). Optional for offer requests, included for alignment with FSM'
              type: string
              additionalProperties: false
        stops:
            type: array
            items:
              type: object
              properties:
                station:
                  $ref: '#/components/schemas/locationRef'
                departureDateTime:
                  description: date and time in the time zone of the station
                  type: string
                arrivalDateTime:
                  description: date and time in the time zone of the station
                  type: string
                index:
                  type: number
                  example: 5
                  description:
                    Unique value [0..*] within the segment, guaranteeing an ascending order,
                    though the value may jump non-continuously.
                    # ~Hafas StopType::routeIndex or any numbering by the underlying system
                departureTrack:
                  type: string
                  example: '13A'
                  description: The info about the departure-track of the stop. Format depends on operator.
                arrivalTrack:
                  type: string
                  example: '13B'
                  description: The info about the arrival-track of the stop. Format depends on operator.
              description:
                Represents a location resp. station.
                Either a departure, arrival or intermediate stop along a segment of a trip.
              required:
                - station
              additionalProperties: false
      required:
        - seqId
        - vehicle
      additionalProperties: false
    stationDef:
      type: object
      properties:
        codeList:
          $ref: '#/components/schemas/stationCodeListDef'
        country:
          type: string
        localCode:
          type: string
        name:
          type: string
      required:
        - country
        - localCode
      additionalProperties: false  
    locationRef:
      type: object
      properties:
        href:
          type: string
          format: url
          example: 'http://some.provider/location/2345'
        title:
          type: string
          example: 'Bruxelles-Midi'
    location:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        type:
          type: string
          enum: [ADDRESS, STATION, STATION_COMPLEX, STATION_ZONE, POI ]
        station:
          $ref: '#/components/schemas/stationDef'
        POI:
          $ref: '#/components/schemas/POI'
        address:
          $ref: '#/components/schemas/address'
        coords:
          $ref: '#/components/schemas/geoCoordinateDef'
        links:
          type: array
          description:
            Context information required by the services.
          items:
            $ref: '#/components/schemas/link'
      required:
        - country
        - LocationCode
      additionalProperties: false
    stationCodeListDef:
      description: 'code list used for the station codes: UIC = UIC codes as used by merits (UIC country code + local code) = Default// UIC-R = UIC codes for reservation (UIC country code + local code reservation) // ERA = future ERA station code'
      type: string
      default: UIC
    address:
      type: object
      description: 'used to encode an address'
      properties:
        street:
          type: string
        houseNr:
          type: string
        city:
          type: string
        postalCode:
          type: string
        country:
          type: string
    POICodeList:
      description: 'code list used for the POI codes:'
      type: string
      default: UIC
    tripRef:
      type: object
      properties:
        href:
          type: string
          format: url
          example: 'http://some.provider/trip/2345'
        title:
          type: string
          example: 'Bruxelles-Midi - Paris-Nord 20200701 10:05'
        origin:
          $ref: '#/components/schemas/locationRef'
        destination:
          $ref: '#/components/schemas/locationRef'
        serviceBrands:
          type: array
          items:
            $ref: '#/components/schemas/serviceBrandCodeDef'
        departureTime:
          $ref: '#/components/schemas/dateTime'
        arrivalTime:
          $ref: '#/components/schemas/dateTime'
    tripDef:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        segments:
          type: array
          items:
            #alignment: proposition is to have a separate segment definition
            $ref:  '#/components/schemas/segment'
        #alignment: proposition is to add trip origin & destination
        origin:
          $ref: '#/components/schemas/locationRef'
        destination:
          $ref: '#/components/schemas/locationRef'
        duration:
          type: string
          description:
            Total duration over all segment's (format see https://www.w3.org/TR/xmlschema11-2/#duration)
          example: P2DT3H4M
        links:
          type: array
          description:
            Context information required by the services.
          items:
            $ref: '#/components/schemas/link'
      additionalProperties: false
    serviceBrandCodeDef:
      description:
            Service brand codes allowed in response, code list can be found on  [https://uic.org/passenger/passenger-services-group/article/service-brand-code-list](https://uic.org/passenger/passenger-services-group/article/service-brand-code-list)
      type: integer
    POI:
      type: object
      properties:
        codeList:
          $ref: '#/components/schemas/POICodeList'
        country:
          type: string
        localCode:
          type: string
        name:
          type: string
      required:
        - country
        - localCode
      additionalProperties: false  
    tripsCollection:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        tripsCollection:
          type: array
          items:
            $ref: '#/components/schemas/tripRef'
        scrollBackContext: # supports Hafas::scrolling
          type: string
          description:
            Scroll reference for the current response to scroll backward.
            (Value depends on underlying system.)
        scrollForwardContext: # supports Hafas::scrolling
          type: string
          description:
            Scroll reference for the current response to scroll   forward.
            (Value depends on underlying system.)
        links:
          type: array
          items:
            $ref: '#/components/schemas/link'
    geoCoordinateDef:
      type: object
      properties:
        system:
          description: 'geo coordinate system indication: wgs84 = WGS 84 standard system, grs80 = (outdated) GRS 80 coordinate system'
          type: string
          enum:
            - wgs84
            - grs80
          default: wgs84
        accuracy:
          description: to be proviced in degree
          type: number
        latitude:
          description: to be provided in degree
          type: number
        longitude:
          description: to be provided in degree
          type: number
      required:
        - latitude
        - longitude
      additionalProperties: false
    dateTime:
      description:
            Local date/time of the underlying system (ISO notation see RFC3339-sec5.6).
            Timezone is related to station time, therefore it must not be specified in request.
            The underlying system will find hits about the given instance in time and will respond dateTime with appropriate TIMEZONE as well.
      type: string
      format: date-time
    tripSearchCriteria:
      type: object
      properties:
      #decision: how do we specify location as parameters. At the moment it is implicitly limited to station codes, but maybe we should broaden the scope here
      #proposal is to use locations here . OPen point: should we can we (from rest principles standpoint) have it without ID/href (and provide only code and codelist for ex) ? I would tend to say no, and make id mandatory. In addition it means the origin and destination and vias can be of any type
        origin:
          $ref: '#/components/schemas/location'
        destination:
          $ref: '#/components/schemas/location'
        viaValues:
          description:
            Ordered list of via locations within the trip.
            Unique code value has to be set according to valueType.
            Max number of via's depends on the underlying system.
          type: array
          items:
            $ref: '#/components/schemas/location'
        traveldateTime:
           $ref: '#/components/schemas/dateTime'
        isArrival:
          description:
            Defines whether or not the given travel date/time is the latest arrival
            (true arriving at given time; false departing at given time).
          type: boolean
          default: false
        transportMode:
          description: transport mode (code list of MERITS). Optional for offer requests, included for alignment with FSM
          type: string
        serviceBrands:
          type: array
          items:
            type: string
        maxChanges:
          description: Max amount of transport-product changes (0 for     direct connection, default/max=11)
          type: number
          # Future use incremental/additionalChangingTime
        extendedChangeTime:
          description: OOS MVP
            Indicates additional transfer time required where a transfer is present in the resulting trip. Expressed in minutes
          type: number
        PRMAssistance:
          description: OOS MVP
            Indicates a need for an itinerary where end-to-end PMR assistance and accessibility is possible
          type: boolean
          default: false
      required:
      - originValue
      - destinationValue
    offerSearchCriteria:
    #decision: I could not get my hands on a firm list of parameters we wanted to support (at least for MVP) in the offer search for the offer part (for trips I think we  are fine)
      type: object
      properties:
        flexibilities:
          description:
            Defines the flexibility levels desired in the fares returned
          type: array
          items:
            $ref: '#/components/schemas/flexibility'
        classes:
          type: array
          items:
            $ref: '#/components/schemas/serviceClassDef'
          description:
            Defines the comfort classes desired for the fares returned (1st vs second, possibly refined A,B,C,D selection)
        currency:
          $ref: '#/components/schemas/currencyDef'
    tripOfferRequest:
      type: object
      properties:
        tripId:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
          description: optionally used instead of tripSearchCriteria element, if the offers are to be constructed for a previously built trip
        tripRef:
          type: string
          format: url
          example: 'http://some.provider/trip/2345'
        trip:
          $ref: '#/components/schemas/tripDef'
        requestedSection:
          $ref: '#/components/schemas/travelSectionDef'
        passengers:
          type: array
          items:
            $ref: '#/components/schemas/passengerDef'
        tripSearchCriteria:
          $ref: '#/components/schemas/tripSearchCriteria'
        OfferSearchCriteria:
          $ref: '#/components/schemas/offerSearchCriteria'
    tripOffer:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        trip:
          $ref: '#/components/schemas/tripRef'
        offers:
          type: array
          items:
            $ref: '#/components/schemas/offerRef'
        passengers:
          type: array
          items:
            $ref: '#/components/schemas/passengerRef'
        links:
          type: array
          items:
            $ref: '#/components/schemas/link'
    tripOfferRef:
      type: object
      #decision: what should we add in this ref ? I would propose the tripRef and OfferRefs ?
      properties:
        href:
          type: string
          format: url
          example: 'http://some.provider/tripOffer/2345'
        title:
          type: string
          example: 'Bruxelles-Midi 10:05 20200701'
    offer:
      type: object
      properties:
        minimalPrice:
          $ref: '#/components/schemas/currencyPriceDef'
        overallServiceClass:
           $ref: '#/components/schemas/serviceClassDef'
        # alignment: not sure if we want to have the extended "serviceLevelDef or just the ID. I assumed the latter so far"
        overallServiceLevel:
          $ref: '#/components/schemas/serviceLevelIdDef'
        overallFlexibility:
          $ref: '#/components/schemas/flexibility'
        trip:
          $ref: '#/components/schemas/tripRef'
        #decision: not sure validfrom/to are actually location, can it be confirmed ?
        validFrom:
          $ref: '#/components/schemas/locationRef'
        validTo:
          $ref: '#/components/schemas/locationRef'
        links:
          type: array
          items:
            $ref: '#/components/schemas/link'
    offerRef:
      type: object
      properties:
        href:
          type: string
          format: url
          example: 'http://some.provider/offer/2345'
        title:
          type: string
          example: 'Bruxelles-Midi- Paris-Nord 10:05 20200701 NF 50 EUR'
    tripOffersCollection:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        tripOffers:
          type: array
          items:
            $ref: '#/components/schemas/tripOfferRef'
        scrollBackContext: # supports Hafas::scrolling
          type: string
          description:
            Scroll reference for the current response to scroll backward.
            (Value depends on underlying system.)
        scrollForwardContext: # supports Hafas::scrolling
          type: string
          description:
            Scroll reference for the current response to scroll   forward.
            (Value depends on underlying system.)
        links:
          type: array
          items:
            $ref: '#/components/schemas/link'
    currencyDef:
      description: ISO4217 currency codes
      type: string            
    currencyPriceDef:
      type: object
      minProperties: 1
      properties:
        currency:
          $ref: '#/components/schemas/currencyDef'
        amount:
          type: number
        vatDetail:
          type: array
          items:
            type: object
            properties:
              country:
                type: string
              amount:
                type: number
              percentage:
                type: number
              taxId:
                type: string
              scope:
                description: 'scope where the VAT applies: INTERNALTIONAL, NATIONAL, SHORT_DISTANCE, LONG_DISTANCE'
                type: string
            required:
              - Country
            additionalProperties: false
      required:
        - currency
        - amount
      additionalProperties: false            
    passengerDef:
      type: object
      properties:
        #decision: while these passengerDefs should be data structures, I think in responses they should be resources.
        passengerReference:
          description: used to refer to passengers from other elements, or from caller system.
          type: string
        dateOfBirth:
          description: YYYY-MM-DD (2017-07-21)
          type: string
        reductionCards:
          type: array
          items:
            $ref: '#/components/schemas/reductionCardReferenceDef'
        gender:
          description: 'MALE,FEMALE,X (only in case of night trains)'
          type: string
        type:
          type: string
          #decision: I would need an extract of the various codelists referred to in ntm specs so I know what it is about
          description: Values from the traveler type code list IRS 90918-10
      required:
        - travelerId
        - dateOfBirth
      additionalProperties: false
    reductionCardReferenceDef:
      type: object
      properties:
        cardValue:
          description: code of the card type according to code list
          type: string
        cardValueType:
          description: codelist for the cardValue provided
          type: string
        cardName:
          description: card name for printing on tickets
          type: string
        issuer:
          type: string
          description: RICS company code or the upcoming compatible ERA company code. In case proprietary codes are used on a bilateral base the codes must have at least 5 positions and start with x
        serviceClasses:
          description: list of service classes in case this class is available for different classes
          type: array
          items:
            $ref: '#/components/schemas/serviceClassDef'
      required:
        - cardId
        - cardValueType
      additionalProperties: false
    #alignement: I have taken over the passengerDetailsDef but removed id, as we have it at resource level, birthdate as we have it in passengerDef (which is reused to retrieve offers and some fields as they seemed overkill/unlikely to be known (language, socialMediaAccount, trainStaffInfo)
    #decision: maybe it makes sense to merge passengerDef and passengerDetailsDef so if a system has all the details on a passenger from the start, it can put them in right at the start ? Not done so far
    passengerDetailsDef:
      type: object
      properties:
        eMail:
          type: array
          items:
            type: string
            format: email
        firstName:
          type: string
        firstNameICAO:
          description: ICAO transliteration
          type: string
        lastName:
          type: string
        lastNameICAO:
          description: ICAO transliteration
          type: string
        title:
          type: string
        phone:
          type: array
          items:
            type: string
      additionalProperties: false
    serviceClassDef:
      type: object
      properties:
        id:
          description: The detailed comfort class
          type: string
          #decions : propose to make class id an enum
          enum:
          - A
          - B
          - C
          - D
        #alignment: removed textRef and replaced text property with carrierName
        carrierName:
          type: string
          description: the name the carrier itself uses to designate this specific comfort class
        #propose to make classicClass an enum
        classicClass:
          description: generic class classification,mostly used to harmonize choice and representation across multiple carriers
          type: string
          enum:
          - FIRST
          - SECOND
      required:
        - id
      additionalProperties: false
    travelSectionDef:
      type: object
      properties:
        start:
          $ref: '#/components/schemas/location'
        end:
          $ref: '#/components/schemas/location'
        segmentId:
          description: reference to a trip segment in case the section corresponds to a segment in the trip and the trip is part of the offer
          type: string
      required:
        - start
        - end
      additionalProperties: false
    #decision I think passenger should become resources because of the operations & contents.
    #decision What should be the properties of passengerRef ?
    passengerRef:
      type: object
      properties:
        href:
          type: string
          format: url
          example: 'http://some.provider/passenger/2345'
        title:
          type: string
          example: 'André Dupont'
    passenger:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        passengerDef:
          $ref: '#/components/schemas/passengerDef'
        passengerDetailsDef:
          $ref: '#/components/schemas/passengerDetailsDef'
        links:
          type: array
          items:
            $ref: '#/components/schemas/link'
    serviceLevelIdDef:
      description: 'code of the service level, codelist in IRS 90918-1'
      type: string
    flexibility:
      type: string
      enum:
        - FULLFLEX
        - MIDFLEX
        - NONFLEX
    offerPart:
      type: object
      properties:
        price:
          $ref: '#/components/schemas/currencyPriceDef'
        pricingMode:
          type: string
          enum:
            - COLLECTIVE
            - INDIVIDUAL
          #decision: I assume validity here refers to  a period
        validAsOf:
          $ref: '#/components/schemas/dateTime'
        validUntil:
          $ref: '#/components/schemas/dateTime'
        reductionsApplied:
          type: array
          items:
            $ref: '#/components/schemas/reductionCardReferenceDef'
        passengerRefs:
          type: array
          items:
            $ref: '#/components/schemas/passengerRef'
        #decision: not sure validfrom/to are actually location, can it be confirmed ?
        validFrom:
          $ref: '#/components/schemas/locationRef'
        validTo:
          $ref: '#/components/schemas/locationRef'
        productRefs:
          type: array
          items:
            type: object
            properties:
              productRef:
                $ref: '#/components/schemas/productRef'
              segmentRefs:
                type: array
                items:
                  type: string
    #Decision: I propose to make products a resource as it is highly cacheable. The only caveat here compared to original structure is that it means that the link to segments needs to be taken out of the structure
    #decision: what else should be in the productRef
    productRef:
      type: object
      properties:
        href:
          type: string
          format: url
          example: 'http://some.provider/product/2345'
        title:
          type: string
          example: 'TGV Lyria Loisir 2'
    product:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        code:
          type: string
          description: the product code expressed in the provider system (could be a mapping from an even lower-level provide
          example: r '0100345' or 'ITHABUSA1' or 'PT00AD' 
        description:
          type: string
          description: the textual description of the product
          example: loisir non-flex adult fare
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/productCondition'
          description: structured description of the sales or aftersales conditions
        refundable: 
          type: string
          enum:
            - YES
            - NO
            - WITH_CONDITIONS
        exchangeable:
          type: string
          enum:
            - YES
            - NO
            - WITH_CONDITIONS
        serviceClass:
          $ref: '#/components/schemas/serviceClassDef'
        #decision: what kind of values should we put for fulfillment types ? 
        fulfillmentType:
          type: string
        #alignment : probably something exists in the ntm model ? 
        serviceConstraintText:
          type: string
        #alignment : probably something exists in the ntm model ? 
        carrierConstraintText:
          type: string
    productCondition:
      type: object
      properties:
        type:
          type: string
        description:
          type: string
            
        
          