openapi: 3.0.3
servers:
  - description: fsm dummy server
    url: 'https://virtserver.swaggerhub.com/Real-IT/FSM_MVP/1.0.0'
info:
  title: UIC 90918-10 - OSDM
  version: 0.0.1
  description: |
    Specifications for the OSDM API standard. The OSDM specification supports two
    modes of operation: Distributor Mode and Allocator Mode. The API works the same in 
    both mode, except that in allocator mode the API also returns fare information.
    
    The OSDM specification combines the nTM as well as the FSM initiative into one aligned
    API interface.
  contact:
    name: Nicolas Selleslagh
    url: https://confluence.sbb.ch/display/FSM20
    email: Nicolas.Sellleslagh@benerail.com
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: Journey
    description: >-
      resources to access timetable-only information
  - name: Offers
    description: >-
      resources to get bookable offers
  - name: Offer Parts
    description: >-
      resources to manipulate parts of an offer consisting of, e.g., admissions, reservations,
      integrated reservations or ancillaries 
  - name: Bookings
    description: >-
      resources to manipulate bookings
  - name: Passengers
    description: >-
      resources to manipulate passengers informations at every stage of the flow
  - name: Products
    description: >-
      resources to retrieve products information on one or more products
  - name: Tickets  
    description: >-
      resources to retrieve tickets
  - name: RefundPropositions
    description: >-
      resources to get a refund proposition
paths:
  /locations:
    get:
      tags:
        - Journey
      summary: >-
        allows looking up matching station for a given match value based on
        MatchType
      operationId: getLocations
      description: >-
        allows to build a lookup functionality to get station codes based on
        whatever is known of the station
      parameters:
        - name: Accept-Language
          in: header
          description: >-
            Describes the set of natural languages that are preferred as a
            response to the request (see RFC2616-sec14.4). The response header
            will set "Content-Language" concerning the content (supported
            languages and fallback-language, depends on underlyling system).

            Supporting locations in English (en) is a most.
          schema:
            type: string
          required: false
        - name: matchValue
          in: query
          schema:
            type: string
          required: true
        - name: matchType
          in: query
          description: >-
            Defines the search token type in matchValue (TEXT for names;
            ANY_CODE fallbacks to the code supported by the underlyling system
            (like UIC, EVA or RESARAIL); UIC/EVA/RESARAIL forces stations
            defined by the appropriate code-system explicitely (national
            aspect); COORDS given as "lat,lon").
          required: true
          schema:
            type: string
            default: NAME
            enum:
              - NAME
              - ANY_CODE
              - CODELIST
              - COORDS
        - name: matchCodeList
          in: query
          description: 'in case matchvalue is codelist, the codelist to search into'
          schema:
            type: string
          required: false
        - name: countryCode
          in: query
          description: >-
            Search locations for a specific country (ISO 3166, 2-digits). Meant
            for autocomplete functionalty. A separate endpoint or channel would
            be provided for mass downloads
          required: false
          schema:
            type: string
            example: CH
        - name: limit
          in: query
          description: 'The number of locations to be returned ([1..50]).'
          required: false
          schema:
            type: number
            format: int32
            default: 10
        - in: query
          name: includeBehaviour
          description: >-
            Influences whether referenced resources are returned in full or as references only
          schema:
            type: array
            items:
              type: string
              enum:
                - LOCATIONS
      responses:
        '200':
          description: the set of stations matching the provided input
          content:
            application/json:
              schema:
                type: object
                properties:
                  locations:
                    type: array
                    items:
                      oneOf:
                        - $ref: '#/components/schemas/LocationRef'
                        - $ref: '#/components/schemas/Location'
                    description: depending on the includeBehaviour either references or full location definitions will be returned
        '400':
          description: bad input parameter
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
  '/locations/{id}':
    get:
      tags:
        - Journey
      summary: retrieves a location element
      operationId: getLocationsId
      description: allows to retrieve a complete location resource. A location resource is persistent and has a long time to live to allow long-term caching. Any update of the location information will lead to the creation of a new resource
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the location resource to be retrieved.
      responses:
        '200':
          description: the retrieved location resource
          headers:
            Cache-Control:
              schema:
                type: string
                default: 'public, max-age=43200'
                description: A location resource is persistent and has a long time to live to allow long-term caching. Any update of the location information will lead to the creation of a new resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
        '400':
          description: bad input parameter
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
  '/trips/{id}':
    get:
      tags:
        - Journey
      summary: retrieves a trip element
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the trip to get.
        - in: query
          name: stopBehaviour
          description: >-
            Influences what stops are to be returned in response
            (ORIGIN_DESTINATION_ONLY returns no intermediate stops;
            REAL_BOARDING_ALIGHTING returns all stops except virtual stops).
          schema:
            type: string
            default: ORIGIN_DESTINATION_ONLY
            enum:
              - ORIGIN_DESTINATION_ONLY
              - REAL_BOARDING_ALIGHTING
        - in: query
          name: includeBehaviour
          description: >-
            Influences whether referenced resources are returned in full or as references only
          schema:
            type: array
            items:
              type: string
              enum:
                - LOCATIONS
      operationId: getTripsId
      description: >-
        retrieves a trip element representing a train travel made of one or more
        segments. Depending on the includeBehaviour either references or full location definitions will be returned
      responses:
        '200':
          description: the requested trip
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripDef'
        '400':
          description: bad input parameters
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
  '/trips-collection/{id}':
    get:
      tags:
        - Journey
      summary: >-
        The trips-collection service returns a collection of different trips for a specified
        origin and destination (and via). The unique codes of the origin and
        destination can be resolved using the locations service.
      operationId: getTripsCollection
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the trip to get.
        - name: Accept-Language
          in: header
          description: >-
            Describes the set of natural languages that are preferred as a
            response to the request (see RFC2616-sec14.4). The response header
            will set "Content-Language" concerning the content (supported
            languages and fallback-language, depends on underlyling system).
          schema:
            type: string
          required: false
        - name: scrollContext
          in: query
          description: >-
            Based on a previous search-response, earlier or later connections
            for the same   trip can be retrieved by scrolling back and forth (by
            a pointer-context). You must use the same request parameters as in
            the original trips-request and the given values in the response for
            either "scrollBackContext" or "scrollForwardContext" for optional
            scrolling.
          schema:
            type: string
          required: false
        - in: query
          name: stopBehaviour
          description: >-
            Influences what stops are to be returned in response
            (ORIGIN_DESTINATION_ONLY returns no intermediate stops;
            REAL_BOARDING_ALIGHTING returns all stops except virtual stops).
          schema:
            type: string
            default: ORIGIN_DESTINATION_ONLY
            enum:
              - ORIGIN_DESTINATION_ONLY
              - REAL_BOARDING_ALIGHTING
        - in: query
          name: includeBehaviour
          description: >-
            Influences whether referenced resources are returned in full or as references only
          schema:
            type: array
            items:
              type: string
              enum:
                - TRIPS
                - TRIPS.LOCATIONS
      responses:
        '200':
          description: Trip(s) found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripsCollection'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see
                  RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
  /trips-collection:
    post:
      tags:
        - Journey
      summary: >-
        The tripsCollection service returns different trips for a specified
        origin and destination (and via). The unique codes of the origin and
        destination can be resolved using the locations service.
      operationId: postTrips
      parameters:
        - name: Accept-Language
          in: header
          description: >-
            Describes the set of natural languages that are preferred as a
            response to the request (see RFC2616-sec14.4). The response header
            will set "Content-Language" concerning the content (supported
            languages and fallback-language, depends on underlyling system).
          schema:
            type: string
          required: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TripSearchCriteria'
      responses:
        '200':
          description: Trip(s) found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripsCollection'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see
                  RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'

        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
  /trip-offers-collection/{id}:
    get:
      tags:
        - Offers
      summary: >-
        The tripOffersCollection service returns different offes and trips for a
        specified origin and destination (and via). The unique codes of the
        origin and destination can be resolved using the locations service.
      operationId: getTripOffersCollection
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the trip to get.
        - name: Accept-Language
          in: header
          description: >-
            Describes the set of natural languages that are preferred as a
            response to the request (see RFC2616-sec14.4). The response header
            will set "Content-Language" concerning the content (supported
            languages and fallback-language, depends on underlyling system).
          schema:
            type: string
          required: false
        - name: scrollContext
          in: query
          description: >-
            Based on a previous search-response, earlier or later connections
            for the same   trip can be retrieved by scrolling back and forth (by
            a pointer-context). You must use the same request parameters as in
            the original trips-request and the given values in the response for
            either "ScrollBack-Context" or "ScrollForward-Context" for optional
            scrolling.
          schema:
            type: string
          required: false
        - in: query
          name: stopBehaviour
          description: >-
            Influences what stops are to be returned in response
            (ORIGIN_DESTINATION_ONLY returns no intermediate stops;
            REAL_BOARDING_ALIGHTING returns all stops except virtual stops).
          schema:
            type: string
            default: ORIGIN_DESTINATION_ONLY
            enum:
              - ORIGIN_DESTINATION_ONLY
              - REAL_BOARDING_ALIGHTING                    
        - in: query
          name: includeBehaviour
          description: >-
            Influences whether referenced resources are returned in full or as references only
          schema:
            type: array
            items:
              type: string
              enum:
                - TRIPOFFERS
                - TRIPOFFERS.TRIPS
                - TRIPOFFERS.TRIPS.LOCATIONS
                - TRIPOFFERS.OFFERS
                - TRIPOFFERS.OFFERS.OFFERPARTS
                - TRIPOFFERS.PASSENGERS
      responses:
        '200':
          description: Trip(s) found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripOffersCollection'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see
                  RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'          
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
  /trip-offers-collection:
    post:
      tags:
        - Offers
      summary: >-
        The tripsCollection service returns different trips for a specified
        origin and destination (and via). The unique codes of the origin and
        destination can be resolved using the locations service.
      operationId: getOffersUsingGET
      parameters:
        - name: Accept-Language
          in: header
          description: >-
            Describes the set of natural languages that are preferred as a
            response to the request (see RFC2616-sec14.4). The response header
            will set "Content-Language" concerning the content (supported
            languages and fallback-language, depends on underlyling system).
          schema:
            type: string
          required: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TripOfferRequest'
      responses:
        '200':
          description: Trip(s) found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripOffersCollection'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see
                  RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error        
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
  /trip-offers/{id}:
    get:
      tags:
        - Offers
      summary: >-
        The trip-offers service returns different offers and trips for a specified
        origin and destination (and via). The unique codes of the origin and
        destination can be resolved using the locations service.
      operationId: getTripOffer
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the trip to get.
        - in: query
          name: includeBehaviour
          description: >-
            Influences whether referenced resources are returned in full or as references only
          schema:
            type: array
            items:
              type: string
              enum:
                - TRIPS
                - TRIPS.LOCATIONS
                - OFFERS
                - OFFERS.OFFERPARTS
                - PASSENGERS
      responses:
        '200':
          description: TripOffer found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripOffer'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see
                  RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'         
        '501':
          description: Not implemented
  '/offers/{id}':
    get:
      tags:
        - Offers
      summary: >-
        The get offers service returns the requested offer or bookedOffer with the requested included subresources
      operationId: getOffer
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the trip to get.
        - in: query
          name: includeBehaviour
          description: >-
            Influences whether referenced resources are returned in full or as references only
          schema:
            type: array
            items:
              type: string
              enum:
                - OFFERPARTS
                - TRIP
                - TRIP.LOCATIONS
      responses:
        '200':
          description: TripOffer found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Offer'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see
                  RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
  '/passengers/{id}':
    get:
      tags:
        - Passengers
      summary: >-
        The get passenger service returns the information on the passenger with
        the id provided
      operationId: getPassenger
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the passenger to get.
      responses:
        '200':
          description: Passenger found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Passenger'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see
                  RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
    patch:
      tags:
        - Passengers
      summary: The patch passenger service allows updating a passenger Information
      operationId: patchPassenger
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the passenger to get.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Passenger'
      responses:
        '200':
          description: Passenger found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Passenger'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see
                  RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
  '/products/{id}':
    get:
      tags:
        - Products
      summary: >-
        The get product service returns the information on products with the
        id provided
      operationId: getProduct
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the product to get.
      responses:
        '200':
          description: Product found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          headers:
            Cache-Control:
              schema:
                type: string
                default: 'public, max-age=43200'
                description: A product resource has a long time to live to allow long-term caching. Any update of the product information will lead to the creation of a new resource
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see
                  RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
  '/offers/{offerId}/admissions/{id}':
    get:
      tags:
        - Offer Parts
      summary: >-
        The get admission service returns the information on the
        admission with the id provided
      operationId: getadmission
      parameters:
        - in: path
          name: offerId
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the offer the offerPart is part of.
        - in: path
          name: id
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the admission to get.
      responses:
        '200':
          description: admission found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Admission'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see
                  RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
  '/offers/{offerId}/reservations/{id}':
    get:
      tags:
        - Offer Parts
      summary: >-
        The get reservation service returns the information on the reservation
        with the id provided
      operationId: getReservation
      parameters:
        - in: path
          name: offerId
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the offer the offerPart is part of.
        - in: path
          name: id
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the reservation to get.
      responses:
        '200':
          description: reservation found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see
                  RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
    patch:
      tags:
        - Offer Parts
      summary: 'The patch reservation service allows updating reservation elements, allowing to update the desired reservation selection for one or more passengers. Note that only the following elements of the reservationSeletion can actually be patched: selectedCompartmentOptions, seatingPreferenceType, placeNumber, coachNumber and direction'
      operationId: patchReservation
      parameters:
        - in: path
          name: offerId
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the offer the reservation is part of.
        - in: path
          name: id
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the reservation to patch to patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reservation'
      responses:
        '200':
          description: reservation successfully patched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see
                  RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
  '/offers/{offerId}/integrated-reservations/{id}':
    get:
      tags:
        - Offer Parts
      summary: >-
        The get integrated-reservation service returns the information on the
        IntegratedReservation with the id provided
      operationId: getIntegratedReservation
      parameters:
        - in: path
          name: offerId
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the offer the offerPart is part of.      
        - in: path
          name: id
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the IntegratedReservation to get.
      responses:
        '200':
          description: IntegratedReservation found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegratedReservation'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see
                  RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
  '/offers/{offerId}/ancillaries/{id}':
    get:
      tags:
        - Offer Parts
      summary: >-
        The get ancillary service returns the information on the ancillary with
        the id provided
      operationId: getAncillary
      parameters:
        - in: path
          name: offerId
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the offer the offerPart is part of.
        - in: path
          name: id
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the product to get.
      responses:
        '200':
          description: ancillary found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ancillary'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see
                  RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
  /bookings:
    post:
      tags:
        - Bookings
      summary: >-
        The post booking command allows to create a booking based on a
        previously requested offer
      operationId: postBooking
      parameters:
        - name: Accept-Language
          in: header
          description: >-
            Describes the set of natural languages that are preferred as a
            response to the request (see RFC2616-sec14.4). The response header
            will set "Content-Language" concerning the content (supported
            languages and fallback-language, depends on underlyling system).
          schema:
            type: string
          required: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingRequest'
      responses:
        '200':
          description: Booking created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see
                  RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
  '/bookings/{id}':
    get:
      tags:
        - Bookings
      summary: >-
        The get booking service returns the information on the booking with the
        id provided
      operationId: getBooking
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the product to get.
        - in: query
          name: includeBehaviour
          description: >-
            Influences whether referenced resources are returned in full or as references only
          schema:
            type: array
            items:
              type: string
              enum:
                - BOOKEDOFFERS.TRIP
                - BOOKEDOFFERS.TRIP.LOCATIONS
                - BOOKEDOFFERS
                - BOOKEDOFFERS.OFFERPARTS
                - PASSENGERS
                - TICKETS
      responses:
        '200':
          description: booking found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see
                  RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
    delete:
      tags:
        - Bookings
      summary: >-
        The delete booking service removes the booking with the id provided. It
        is only possible before the booking is confirmed.
      operationId: deleteBooking
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the booking to delete.
      responses:
        '200':
          description: booking successfully cancelled
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
  '/tickets':
    post:
      tags:
        - Tickets
      summary: >-
        The post tickets command triggers fulfillment of the booking based on the information currently contained in the proviced booking
      operationId: postTicket
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketRequest'
      responses:
        '202': 
          description: Fulfillment successfully initiated
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
  '/tickets/{id}':
    get:
      tags:
        - Tickets
      summary: >-
        The get ticket service returns the information on the ticket with the id
        provided.
      operationId: getTicket
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the product to get.
      responses:
        '200':
          description: ticket found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see
                  RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
          
  '/bookings/{bookingId}/RefundPropositions':
    post:
      tags:
        - RefundPropositions
      summary: >-
        The post RefundPropositions initiates a refund process by creating   a refundProposition resourcen containing the needed information on the potential operation. The proposition can then be accepted via a patch, deleted or left to die at the end of its lifetime
      operationId: postRefundProposition
      parameters:
        - in: path
          name: bookingId
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the offer the offerPart is part of.      
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefundPropositionRequest'
      responses:
        '200': 
          description: Refund proposition created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefundProposition'
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
        
  '/bookings/{bookingId}/RefundPropositions/{id}':
    get:
      tags:
        - RefundPropositions
      summary: >-
        The get RefundProposition service returns the Refund proposition with the id
        provided.
      operationId: getRefundProposition
      parameters:
        - in: path
          name: bookingId
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the offer the offerPart is part of.      
        - in: path
          name: id
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the product to get.
      responses:
        '200':
          description: RefundProposition found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefundProposition'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see
                  RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
    delete:
      tags:
        - RefundPropositions
      summary: >-
        The delete RefundProposition service cancels the Refund proposition with the id
        provided. The resource is disposed and will not be mentioned in the booking anymore
      operationId: deleteRefundProposition
      parameters:
        - in: path
          name: bookingId
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the offer the offerPart is part of.      
        - in: path
          name: id
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the product to get.
      responses:
        '200':
          description: RefundProposition found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefundProposition'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see
                  RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented
    patch:
      tags:
        - RefundPropositions
      summary: >-
        The patch RefundProposition service allows to accept and confirm a refund operation. 
      operationId: patchRefundProposition
      parameters:
        - in: path
          name: bookingId
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the offer the offerPart is part of.      
        - in: path
          name: id
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
          required: true
          description: ID of the product to get.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefundPropositionConfirm'
      responses:
        '200':
          description: RefundProposition confirmed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefundProposition'
          headers:
            Content-Language:
              schema:
                type: string
                description: >-
                  The language of translatable strings in the response (see
                  RFC2616-sec14.12).
        '400':
          description: Bad request
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal server error
          content:
            "application/problem+json":
              schema:
                $ref: '#/components/schemas/Problem'
        '501':
          description: Not implemented

## Components

components:
  schemas:
    Link:
      type: object
      required:
        - contentTypes
        - href
        - relation
      properties:
        contentTypes:
          type: array
          example: '["application/json", "application/pdf"]'
          description: Possible content types of the resource.
          items:
            type: string
        href:
          type: string
          format: uri
          description: URL to the linked resource (no parameters needed).
          example: 'https://www.brussels.info/train-stations/'
        method:
          type: string
          example: GET
          description: HTTP method to call the action
        relation:
          type: string
          example: Get Map
          description: Relation of this link to the current entity.
        version:
          type: integer
          format: int32
          example: 1
          description: Version of the current relation.
      description: >-
        The underlying system may provide additional links pointing on further
        information (such as HTML download links, websites or extended APIs).
        Mechanism to add flexible extensions specific to an underlying system.
    Segment:
      description: A segment represents a subsection of a trip that is realised with the same transport. In railways it is typically one train (between the moment traveller steps onboard until stepping out of that train), but could be using a different mean of transportation 
      type: object
      properties:
        index:
          type: integer
        origin:
          oneOf:
            - $ref: '#/components/schemas/LocationRef'
            - $ref: '#/components/schemas/Location'
          description: departure point of the segment
        destination:
          oneOf:
            - $ref: '#/components/schemas/LocationRef'
            - $ref: '#/components/schemas/Location'
          description: arrival point of the segment
        seqId:
          description: sequence number of the segment in the ordering of all segments of the trip
          type: number
          format: int32
        transfer:
          description: Transfer to the next vehicle not included in the request
          type: object
          properties:
            duration:
              description: Duration forseen to transfer to the next section
              type: number
              format: int32
            transferType:
              description: 'WALK,...'
              type: string
          required:
            - duration
            - transferType
          additionalProperties: false
        vehicle:
          type: object
          properties:
            numbers:
              description: >-
                Id of the vehicle, In case of two train s running in parallel
                there might be two train numbers.
              type: array
              items:
                type: string
            line:
              description: >-
                Line number in case the vehical does not have a number
              type: string
            serviceBrand:
              $ref: '#/components/schemas/ServiceBrandCodeDef'
            transportMode:
              description: >-
                Transport mode (code list of MERITS). Optional for offer
                requests, included for alignment with FSM
              type: string
              additionalProperties: false
        stops:
          description: the list of stops encountered between origin and destination. origin is the first stop mentioned and destination the last one. This list is only returned when the stopBehaviour is set to REAL_BOARDING_ALIGHTING
          type: array
          items:
            type: object
            properties:
              station:
                $ref: '#/components/schemas/LocationRef'
              departureDateTime:
                description: date and time in the time zone of the station
                type: string
                format: date
              arrivalDateTime:
                description: date and time in the time zone of the station
                type: string
                format: date
              index:
                type: number
                format: int32
                example: 5
                description: >-
                  Unique value [0..*] within the segment, guaranteeing an
                  ascending order, though the value may jump non-continuously.
              departureTrack:
                type: string
                example: 13A
                description: >-
                  The info about the departure-track of the stop. Format depends
                  on operator.
              arrivalTrack:
                type: string
                example: 13B
                description: >-
                  The info about the arrival-track of the stop. Format depends
                  on operator.
            description: >-
              Represents a location resp. station. Either a departure, arrival
              or intermediate stop along a segment of a trip.
            required:
              - station
            additionalProperties: false
      required:
        - seqId
        - vehicle
      additionalProperties: false
    Station:
      description: Used to represent a station location. This is a location that can be used as origin and destination for a train journey
      type: object
      properties:
        codes:
          type: array
          items:
            type: object
            properties:
              codeList:
                $ref: '#/components/schemas/StationCodeListDef'
              stationCode:
                type: string
                description: the code representing the station in the specified codelist
          description: the codes that can be used to represent the given station on the system. There can be several codes, in which case it is relevant to have a list of couples
        country:
          type: string
          description: the country the station is located in
        name:
          type: string
          description : name of the station in the requested language
      required:
        - country
        - localCode
      additionalProperties: false
    LocationRef:
      type: object
      properties:
        href:
          type: string
          format: url
          example: 'http://some.provider/location/2345'
        title:
          type: string
          example: Bruxelles-Midi
    Location:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        type:
          oneOf:
            - $ref: '#/components/schemas/Station'
            - $ref: '#/components/schemas/POI'
            - $ref: '#/components/schemas/Address'
            - $ref: '#/components/schemas/GeoCoordinate'
        links:
          type: array
          description: Context information required by the services.
          items:
            $ref: '#/components/schemas/Link'
      required:
        - country
        - LocationCode
      additionalProperties: false
    StationCodeListDef:
      description: >-
        Code list used for the station codes: UIC = UIC codes as used by merits
        (UIC country code + local code) = Default// UIC-R = UIC codes for
        reservation (UIC country code + local code reservation) // ERA = future
        ERA station code
      type: string
      default: UIC
    Address:
      type: object
      description: used to encode an address using the standard street address attributes
      properties:
        street:
          type: string
          example: Segantinistrasse
        houseNr:
          description: house number
          type: string
          example: 7
        city:
          description: city
          type: string
          example: Bern
        postalCode:
          description: postal code
          type: string
          example: 3006
        country:
          description: country
          type: string
          example: Schweiz
    POICodeList:
      description: Code list used for the POI codes.
      type: string
      default: UIC
    TripRef:
      type: object
      properties:
        href:
          type: string
          format: url
          example: 'http://some.provider/trip/2345'
        title:
          type: string
          example: Bruxelles-Midi - Paris-Nord 20200701 10:05
      #  origin:
      #  $ref: '#/components/schemas/LocationRef'
      #  destination:
      #    $ref: '#/components/schemas/LocationRef'
      #  serviceBrands:
      #    type: array
      #    items:
      #      $ref: '#/components/schemas/ServiceBrandCodeDef'
      #  departureTime:
      #    $ref: '#/components/schemas/DateTime'
      #  arrivalTime:
      #    $ref: '#/components/schemas/DateTime'
    TripDef:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        segments:
          type: array
          items:
            $ref: '#/components/schemas/Segment'
        origin:
          oneOf:
            - $ref: '#/components/schemas/LocationRef'
            - $ref: '#/components/schemas/Location'
        destination:
          oneOf:
            - $ref: '#/components/schemas/LocationRef'
            - $ref: '#/components/schemas/Location'
        duration:
          type: string
          description: >-
            Total duration over all segment's (format see
            https://www.w3.org/TR/xmlschema11-2/#duration)
          example: P2DT3H4M
        links:
          type: array
          description: Context information required by the services.
          items:
            $ref: '#/components/schemas/Link'
      additionalProperties: false
    ServiceBrandCodeDef:
      description: >-
        Service brand codes allowed in response, code list can be found on 
        [https://uic.org/passenger/passenger-services-group/article/service-brand-code-list](https://uic.org/passenger/passenger-services-group/article/service-brand-code-list)
      type: integer
    POI:
      description: POI (for point of Interest) represent a location that is not a train station but still relevant to the description of the trip. It could be a public transport stop, an exhibition, an event hall, a shopping mall etc.
      type: object
      properties:
        codes:
          type: array
          items:
            type: object
            properties:
              codeList:
                $ref: '#/components/schemas/POICodeList'
              stationCode:
                type: string
                description: the code representing the POI in the specified codelist
          description: the codes that can be used to represent the given POI on the system. There can be several codes, in which case it is relevant to have a list of couples
        country:
          description: country
          type: string
          example: Schweiz 
        name:
          description: name of the point of interest
          type: string
          example: Bern Bärengraben (Denkmal)
      required:
        - country
        - localCode
      additionalProperties: false
    TripsCollection:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        tripsCollection:
          type: array
          items:
            $ref: '#/components/schemas/TripRef'
        scrollBackContext:
          type: string
          description: >-
            Scroll reference for the current response to scroll backward. (Value
            depends on underlying system.)
        scrollForwardContext:
          type: string
          description: >-
            Scroll reference for the current response to scroll   forward.
            (Value depends on underlying system.)
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
    GeoCoordinate:
      description: used to provide any geocoded location, regardless of environment, using long and lat coordinates
      type: object
      properties:
        system:
          description: >-
            geo coordinate system indication: 
             - WGS84 = WGS 84 standard system,
             - GRS80 = (outdated) GRS 80 coordinate system
          type: string
          enum:
            - WGS84
            - GRS80
          default: WGS84
        accuracy:
          description: to be proviced in degree. TODO clarify semantics
          type: number
          format: float
        latitude:
          description: >-
            Geographic coordinate that specifies the north-south position of a point on the earth’s surface
          type: number
          format: float
          example: 46.948825
        longitude:
          description: >-
            Geographic coordinate that specifies the east-west position of a point on the earth’s surface.            
          type: number
          format: float
          example: 7.439122
      required:
        - latitude
        - longitude
      additionalProperties: false
    DateTime:
      description: >-
        Local date/time of the underlying system (ISO notation see
        RFC3339-sec5.6). Timezone is related to station time, therefore it must
        not be specified in request. The underlying system will find hits about
        the given instance in time and will respond dateTime with appropriate
        TIMEZONE as well.
      type: string
      format: date-time
    TripSearchCriteria:
      type: object
      properties:
        includeBehaviour:
          description: >-
            Influences whether referenced resources are returned in full or as references only
          type: array
          items:
            type: string
            enum:
              - TRIPS
              - TRIPS.LOCATIONS
        stopBehaviour:
          description: >-
            Influences what stops are to be returned in response
            (ORIGIN_DESTINATION_ONLY returns no intermediate stops;
            REAL_BOARDING_ALIGHTING returns all stops except virtual stops).
          type: string
          default: ORIGIN_DESTINATION_ONLY
          enum:
            - ORIGIN_DESTINATION_ONLY
            - REAL_BOARDING_ALIGHTING
        origin:
          $ref: '#/components/schemas/Location'
        destination:
          $ref: '#/components/schemas/Location'
        viaValues:
          description: >-
            Ordered list of via locations within the trip. Unique code value has
            to be set according to valueType. Max number of via's depends on the
            underlying system.
          type: array
          items:
            $ref: '#/components/schemas/Location'
        traveldateTime:
          $ref: '#/components/schemas/DateTime'
        isArrival:
          description: >-
            Defines whether or not the given travel date/time is the latest
            arrival (true arriving at given time; false departing at given
            time).
          type: boolean
          default: false
        transportMode:
          description: >-
            transport mode (code list of MERITS). Optional for offer requests,
            included for alignment with FSM
          type: string
        serviceBrands:
          type: array
          items:
            type: string
        maxChanges:
          description: >-
            Max amount of transport-product changes (0 for direct
            connection, default/max=11)
          type: number
          format: int32
        extendedChangeTime:
          description: >-
            OOS MVP Indicates additional transfer time required where a transfer
            is present in the resulting trip. Expressed in minutes
          type: number
          format: int32
        PRMAssistance:
          description: >-
            OOS MVP Indicates a need for an itinerary where end-to-end PMR
            assistance and accessibility is possible
          type: boolean
          default: false
      required:
        - originValue
        - destinationValue
    OfferSearchCriteria:
      type: object
      properties:
        flexibilities:
          description: Defines the flexibility levels desired in the fares returned
          type: array
          items:
            $ref: '#/components/schemas/Flexibility'
        classes:
          type: array
          items:
            $ref: '#/components/schemas/ServiceClassDef'
          description: >-
            Defines the comfort classes desired for the fares returned (1st vs
            second, possibly refined A,B,C,D selection)
        currency:
          $ref: '#/components/schemas/CurrencyDef'
        includeBehaviour:
          description: >-
            Influences whether referenced resources are returned in full or as references only
          type: array
          items:
            type: string
            enum:
              - OFFERPARTS
    TripOfferRequest:
      type: object
      properties:
        tripId:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
          description: >-
            optionally used instead of tripSearchCriteria element, if the offers
            are to be constructed for a previously built trip
        tripRef:
          type: string
          format: url
          example: 'http://some.provider/trip/2345'
        trip:
          $ref: '#/components/schemas/TripDef'
        requestedSection:
          $ref: '#/components/schemas/TravelSectionDef'
        passengers:
          type: array
          items:
            $ref: '#/components/schemas/PassengerDef'
        tripSearchCriteria:
          $ref: '#/components/schemas/TripSearchCriteria'
        OfferSearchCriteria:
          $ref: '#/components/schemas/OfferSearchCriteria'
        includeBehaviour:
          description: >-
            Influences whether referenced resources are returned in full or as references only
          type: array
          items:
            type: string
            enum:
              - TRIPOFFERS
              - TRIPOFFERS.TRIP
              - TRIPOFFERS.OFFERS
              - TRIPOFFERS.PASSENGERS
      description: defines the parameters needed to request a trip, standalone or in the context of an offer request. Note at least one of the tripId, tripRef or trip elements must be populated.
    TripOffer:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        trip:
          oneOf:
            - $ref: '#/components/schemas/TripRef'
            - $ref: '#/components/schemas/TripDef'
        offers:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/OfferRef'
              - $ref: '#/components/schemas/Offer'
        passengers:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/PassengerRef'
              - $ref: '#/components/schemas/Passenger'
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
    TripOfferRef:
      type: object
      properties:
        href:
          type: string
          format: url
          example: 'http://some.provider/tripOffer/2345'
        title:
          type: string
          example: 'Bruxelles-Midi 10:05 20200701'
    RequestedInformation:
      type: string
      description: >-
        regular-expression indicating the data that must be set in the data
        model in order to proceed to next step of the process
    OfferSummary:
      type: object
      properties:
        minimalPrice:
          $ref: '#/components/schemas/CurrencyPriceDef'
        overallServiceClass:
          $ref: '#/components/schemas/ServiceClassDef'
        overallServiceLevel:
          $ref: '#/components/schemas/ServiceLevelIdDef'
        overallFlexibility:
          $ref: '#/components/schemas/Flexibility'
    Offer:
      type: object
      properties:
        offerSummary:
          $ref: '#/components/schemas/OfferSummary'
        requestedInformation:
          $ref: '#/components/schemas/RequestedInformation'
        trip:
          oneOf:
            - $ref: '#/components/schemas/TripRef'
            - $ref: '#/components/schemas/TripDef'
        validFrom:
          $ref: '#/components/schemas/DateTime'
        validTo:
          $ref: '#/components/schemas/DateTime'
        offerParts:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/OfferPartRef'
              - $ref: '#/components/schemas/Admission'
              - $ref: '#/components/schemas/Reservation'
              - $ref: '#/components/schemas/IntegratedReservation'
              - $ref: '#/components/schemas/Ancillary'
        fares:
          type: array
          items:
            $ref: '#/components/schemas/FareOnlineDef'
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
    OfferRef:
      type: object
      properties:
        href:
          type: string
          format: url
          example: 'http://some.provider/offer/2345'
        title:
          type: string
          example: 'Bruxelles-Midi- Paris-Nord 10:05 20200701 NF 50 EUR'
    TripOffersCollection:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        tripOffers:
          type: array
          items:
            oneOf:
            - $ref: '#/components/schemas/TripOfferRef'
            - $ref: '#/components/schemas/TripOffer'
        scrollBackContext:
          type: string
          description: >-
            Scroll reference for the current response to scroll backward. (Value
            depends on underlying system.)
        scrollForwardContext:
          type: string
          description: >-
            Scroll reference for the current response to scroll   forward.
            (Value depends on underlying system.)
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
    CurrencyDef:
      description: ISO4217 currency codes
      type: string
    CurrencyPriceDef:
      type: object
      minProperties: 1
      properties:
        currency:
          $ref: '#/components/schemas/CurrencyDef'
        amount:
          description: amount in cents
          type: number
          format: int32
        vatDetails:
          type: array
          items:
            type: object
            properties:
              country:
                type: string
              amount:
                description: amount in cents
                type: number
                format: int32
              percentage:
                type: number
                format: int32
              taxId:
                type: string
              scope:
                description: >-
                  scope where the VAT applies: INTERNATIONAL, NATIONAL,
                  SHORT_DISTANCE, LONG_DISTANCE
                type: string
            required:
              - country
            additionalProperties: false
      required:
        - currency
        - amount
      additionalProperties: false
    PassengerDef:
      type: object
      properties:
        passengerReference:
          description: >-
            used to refer to passengers from other elements, or from caller
            system.
          type: string
        dateOfBirth:
          description: date of birth of the passenger
          type: string
          format: date
        reductionCards:
          description: reduction cards owned by the passenger 
          type: array
          items:
            $ref: '#/components/schemas/ReductionCardReferenceDef'
        gender:
          description: >- 
            gender of the passenger, which is important in the case of night trains
          type: string
          enum:
           - MALE
           - FEMALE
           - X
        type:
          type: string
          description: Values from the traveler type code list IRS 90918-10
      required:
        - travelerId
        - dateOfBirth
      additionalProperties: false
    ReductionCardReferenceDef:
      type: object
      properties:
        cardValue:
          description: code of the card type according to code list
          type: string
        cardValueType:
          description: code list for the cardValue provided
          type: string
        cardName:
          description: card name for printing on tickets
          type: string
        issuer:
          type: string
          description: >-
            RICS company code or the upcoming compatible ERA company code. In
            case proprietary codes are used on a bilateral base the codes must
            have at least 5 positions and start with x.
        serviceClasses:
          description: >-
            list of service classes in case this class is available for
            different classes
          type: array
          items:
            $ref: '#/components/schemas/ServiceClassDef'
      required:
        - cardId
        - cardValueType
      additionalProperties: false
    PassengerDetailsDef:
      type: object
      properties:
        eMails:
          type: array
          items:
            type: string
            format: email
        language:
          type: array
          items:
            type: string
            description: Languages spoken by the traveler (ISO Language code)
        firstName:
          type: string
        firstNameICAO:
          description: ICAO transliteration
          type: string
        lastName:
          type: string
        lastNameICAO:
          description: ICAO transliteration
          type: string
        title:
          type: string
        phones:
          type: array
          items:
            type: string
        socialMediaAccount:
          type: array
          items:
            type: object
            properties:
              account:
                type: string
              accountType:
                description: 'values: facebook,whatsapp,skype,wechat,...'
                type: string
            required:
              - account
              - accountType
            additionalProperties: false
        trainStaffInfo:
          description: Information Text provided by the issuing system in a controled way (e.g. VIP customer)
          type: string
      additionalProperties: false
    ServiceClassDef:
      type: object
      properties:
        id:
          description: The detailed comfort class
          type: string
          enum:
            - A
            - B
            - C
            - D
        carrierName:
          type: string
          description: >-
            the name the carrier itself uses to designate this specific comfort
            class
        classicClass:
          description: >-
            generic class classification,mostly used to harmonize choice and
            representation across multiple carriers
          type: string
          enum:
            - FIRST
            - SECOND
      required:
        - id
      additionalProperties: false
    TravelSectionDef:
      type: object
      properties:
        start:
          $ref: '#/components/schemas/Location'
        end:
          $ref: '#/components/schemas/Location'
        segmentId:
          description: >-
            reference to a trip segment in case the section corresponds to a
            segment in the trip and the trip is part of the offer
          type: string
      required:
        - start
        - end
      additionalProperties: false
    PassengerRef:
      type: object
      properties:
        href:
          type: string
          format: url
          example: 'http://some.provider/passenger/2345'
        title:
          type: string
          example: André Dupont
    Passenger:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        passengerDef:
          $ref: '#/components/schemas/PassengerDef'
        passengerDetailsDef:
          $ref: '#/components/schemas/PassengerDetailsDef'
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
    ServiceLevelIdDef:
      description: 'code of the service level, codelist in IRS 90918-1'
      type: string
    Flexibility:
      type: string
      enum:
        - FULLFLEX
        - MIDFLEX
        - NONFLEX
    OfferPart:
      type: object
      properties:
        price:
          $ref: '#/components/schemas/CurrencyPriceDef'
        pricingMode:
          type: string
          enum:
            - COLLECTIVE
            - INDIVIDUAL
        validAsOf:
          $ref: '#/components/schemas/DateTime'
        validUntil:
          $ref: '#/components/schemas/DateTime'
        reductionsApplied:
          type: array
          items:
            $ref: '#/components/schemas/ReductionCardReferenceDef'
        passengerRefs:
          type: array
          items:
            $ref: '#/components/schemas/PassengerRef'
        validFrom:
          $ref: '#/components/schemas/DateTime'
        validTo:
          $ref: '#/components/schemas/DateTime'
        productRefs:
          type: array
          items:
            type: object
            properties:
              productRef:
                $ref: '#/components/schemas/ProductRef'
              segmentRefs:
                type: array
                items:
                  type: string
    ProductRef:
      type: object
      properties:
        href:
          type: string
          format: url
          example: 'http://some.provider/product/2345'
        title:
          type: string
          example: TGV Lyria Loisir 2
    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        code:
          type: string
          description: >-
            The product code expressed in the provider system (could be a
            mapping from an even lower-level provider).
          example: PT00AD
        description:
          type: string
          description: the textual description of the product
          example: Loisir Non-flex Adult Fare
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/ProductCondition'
          description: >-
            Structured description of the sales or aftersales conditions.
        refundable:
          type: string
          enum:
            - YES
            - NO
            - WITH_CONDITIONS
        exchangeable:
          type: string
          enum:
            - YES
            - NO
            - WITH_CONDITIONS
        serviceClass:
          $ref: '#/components/schemas/ServiceClassDef'
        fulfillmentType:
          type: string
        serviceConstraintText:
          type: string
        carrierConstraintText:
          type: string
    ProductCondition:
      type: object
      properties:
        type:
          type: string
          enum:
            - SALES
            - EXCHANGE
            - REFUND
        description:
          type: string
        validFrom:
          $ref: '#/components/schemas/DateTime'
        validUntil:
          $ref: '#/components/schemas/DateTime'
        aftersalesFee:
          type: object
          properties:
            price:
              $ref: '#/components/schemas/CurrencyPriceDef'
            validFrom:
              $ref: '#/components/schemas/DateTime'
            validUntil:
              $ref: '#/components/schemas/DateTime'
    Admission:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
        offerPart:
          $ref: '#/components/schemas/OfferPart'
        reservationRequired:
          type: boolean
        numericAvailability:
          type: number
          format: int32
        reservations:
          type: array
          items:
            type: object
            properties:
              relationType:
                type: string
                enum:
                  - OPTIONAL
                  - MANDATORY
                  - INCLUDED
              reservation:
                $ref: '#/components/schemas/OfferPartRef'
        ancillaries:
          type: array
          items:
            type: object
            properties:
              relationType:
                type: string
                enum:
                  - OPTIONAL
                  - INCLUDED
              ancillary:
                $ref: '#/components/schemas/OfferPartRef'
   
    Reservation:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
        offerPart:
          $ref: '#/components/schemas/OfferPart'
        numericAvailability:
          description: denotes the number of seats available for booking
          type: number
          format: int32
        reservationDetails:
          type: array
          items:
            $ref: '#/components/schemas/ReservationDetails'
        ReservationSelection:
          $ref: '#/components/schemas/ReservationSelection'
    IntegratedReservation:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
        offerPart:
          $ref: '#/components/schemas/OfferPart'
        numericAvailability:
          description: denotes the number of seats available for booking
          type: number
          format: int32
        ancillaries:
          type: array
          items:
            type: object
            properties:
              relationType:
                type: string
                enum:
                  - OPTIONAL
                  - INCLUDED
              ancillary:
                $ref: '#/components/schemas/OfferPartRef'
        reservationDetails:
          $ref: '#/components/schemas/ReservationDetails'
        ReservationSelection:
          $ref: '#/components/schemas/ReservationSelection'
   
    ReservationSelection:
      type: object
      properties:
        state:
          type: string
          enum:
            - DESIRED
            - ASSIGNED
          description: indicates whether the selection is a wish or the assigned seating of the provider system
        passengers:
          type: array
          items:
            $ref: '#/components/schemas/PassengerRef'
        segmentIndex:
          $ref: '#/components/schemas/SegmentIndex'
        seatingPreferenceType:
          type: string
          enum:
            - EXACT
            - NEARBY
        placeNumber:
          type: string
        coachNumber:
          type: string
        direction:
          type: string
          enum:
            - FORWARD
            - BACKWARD
            - UNKNOWN
        placeDescription:
          type: string
          example: seats 11-45 
          description: in case the reservation applies to several passengers, a place description can be returned instead of exact seat number
        selectedCompartmentOptions: 
          type: array
          items:
            $ref: '#/components/schemas/CompartmentOption'
      description: >-
        Once booked, this element will contain the details of the space
        reserved.
    SegmentIndex:
      type: integer
      description: >-
        Refers to the segment the compartment information relates to by its
        index.
    CompartmentOption:
      type: object
      properties:
        commonForAllPassengers:
          type: boolean
          description: >-
            indicates if the option is applicable to the whole
            passengers party or individually
        compartmentPreference:
          type: object
          properties:
            codelist:
              type: string
              description: the codelist to use for reference
            code:
              type: string
              description: >-
                the code for the option represented in the given
                codelist
    ReservationDetails:
      type: object
      properties:
        compartment:
          type: object
          properties:
            segmentIndex:
              $ref: '#/components/schemas/SegmentIndex'
            serviceClass:
              $ref: '#/components/schemas/ServiceClassDef'
            serviceLevel:
              $ref: '#/components/schemas/ServiceLevelIdDef'
            compartmentOptions:
              type: array
              items:
                $ref: '#/components/schemas/CompartmentOption'
    Ancillary:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
        offerPart:
          $ref: '#/components/schemas/OfferPart'
        category:
          type: string
    OfferPartRef:
      type: object
      properties:
        href:
          type: string
          format: url
          example: >-
            http://some.provider/ancillary/2345 or
            http://some.provider/integratedReservation/2345'
        title:
          type: string
          example: ICE wifi onboard 2020-07-11 or ICE Bruxelles-Frankfurt child 2020-07-12
      description: >-
        References all the offerparts elements in an uniform format. an
        offerPartRef can therefore refer to reservation, integrated reservation
        admission or ancillary (in its href)
    BookingRequest:
      type: object
      properties:
        selectedOfferId:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
          description: id of the selected offer
        selectedReservationsIds:
          type: array
          items:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
            description: >-
              If relevant, ids of the selected optional reservations.
        selectedAncillaries:
          type: array
          items:
            type: object
            properties:
              ancillaryId:
                type: string
                format: uuid
                example: d290f1ee-6c54-4b01-90e6-d701748f0851
                description: >-
                  If relevant, ids of the selected optional ancillaries.
              passengerIds:
                type: array
                items:
                  type: string
                  format: uuid
                  example: d290f1ee-6c54-4b01-90e6-d701748f0851
                description: >-
                  Id of the passengers the selected optional ancillaries are for.
        includeBehaviour:
          description: >-
            Influences whether referenced resources are returned in full or as references only
          type: array
          items:
            type: string
            enum:
              - BOOKEDOFFERS
              - BOOKEDOFFERS.TRIPS
              - BOOKEDOFFERS.TRIPS.LOCATIONS
              - BOOKEDOFFERS.OFFERPARTS
              - PASSENGERS
              - TICKETS
              - REFUND_PROPOSITIONS
      required:
        - selectedOfferId
    Booking:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        reference:
          type: string
          description: The unique booking reference in the provider system. Usually refers to an order number or PNR
        status:
          type: string
          enum:
            - PREBOOKED
            - BOOKED
            - PAID
            - FULFILLED
            - CANCELLED
            - REFUNDED
            - ERROR
        requestedInformation:
          $ref: '#/components/schemas/RequestedInformation'
        ticketTimeLimit:
          $ref: '#/components/schemas/DateTime'
        fulfillmentOptions:
          type: array
          items:
            $ref: '#/components/schemas/FulfillmentOption'
        bookedOffers:
          type: array
          items:
            oneOf:
            - $ref: '#/components/schemas/OfferRef'
            - $ref: '#/components/schemas/Offer'
        passengers:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/PassengerRef'
              - $ref: '#/components/schemas/Passenger'
        tickets:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/TicketRef'
              - $ref: '#/components/schemas/Ticket'
        refundPropositions:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/RefundProposition'
              - $ref: '#/components/schemas/RefundPropositionRef'
          description: in case a refund is initiated, the refund proposition will be created with the details of the to-be-confirmed refund operation. the proposition can then be accepted, which conforms the refund
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
    BookingRef:
      type: object
      properties:
        href:
          type: string
          format: url
          example: 'http://some.provider/booking/2345'
        title:
          type: string
          example: booking 2345
    FulfillmentOption:
      type: string
      enum:
        - ETICKET
        - PAPER
        - TICKETLESS
    Ticket:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        controlNumber:
          type: string
          description: Ticket Control Number
        status:
          type: string
          enum:
            - ACTIVE
            - CANCELLED
            - TRAVELLED
        offerParts:
          type: array
          items:
            $ref: '#/components/schemas/OfferPartRef'
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
    TicketRef:
      type: object
      properties:
        href:
          type: string
          format: url
          example: 'http://some.provider/Ticket/2345'
        title:
          type: string
          example: Ticket Paris-Barcelona Andre Dupont 2020-07-23
    AfterSaleReasonDef:
      description: 'reason and type for an after sale, Code list in IRS 90918-10'
      type: string
    RefundProposition:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
          description: id of the refund proposition
        validUntil:
          $ref: '#/components/schemas/DateTime'
        status:
          type: string
          enum:
            - PROPOSED
            - CONFIRMED
          default: PROPOSED
        appliedOverruleCode:
          $ref: '#/components/schemas/AfterSaleReasonDef'
          description: if applicable, which overruleCode should be applied to the request
        tickets:
          type: array
          items: 
            $ref: '#/components/schemas/TicketRef'
        totalRefundFees:
          $ref: '#/components/schemas/CurrencyPriceDef'
        refundableAmount:
          $ref: '#/components/schemas/CurrencyPriceDef'
        fees:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                enum:
                  - DISTRIBUTION
                  - CARRIER
                  - PHYSICAL_HANDLING
              amount:
                $ref: '#/components/schemas/CurrencyPriceDef'
    RefundPropositionRef:
      type: object
      properties:
        href:
          type: string
          format: url
          example: 'http://some.provider/bookings/2345/RefundPropositions/123'
        title:
          type: string
          example: Refund Paris-Barcelona Andre Dupont 2020-07-23
    TicketRequest:
      type: object
      properties:
        bookingId:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
          description: id of the booking to fulfill (no partial fulfillment)
      required:
        - bookingId
    RefundPropositionRequest:
      type: object
      properties:
        tickets:
          type: array
          items:
            $ref:  '#/components/schemas/TicketRef'
          description: the list of tickets that should be covered by the proposition
        overruleCode: 
          $ref: '#/components/schemas/AfterSaleReasonDef
      required:
        - tickets
    RefundPropositionConfirm:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
          description: id of the refund proposition
        status:
          type: string
          enum:
            - CONFIRMED
    Problem:
      type: object
      properties:
        type:
          type: string
          format: uri
          description: >-
            An absolute URI that identifies the problem type. When dereferenced,
            it SHOULD provide human-readable documentation for the problem type
            (e.g., using HTML).
          default: 'about:blank'
          example: 'https://zalando.github.io/problem/constraint-violation'
        title:
          type: string
          description: >-
            A short, summary of the problem type. Written in English and readable
            for engineers (usually not suited for non technical stakeholders and
            not localized); example: Service Unavailable
        status:
          type: integer
          format: int32
          description: >-
            The HTTP status code generated by the origin server for this occurrence
            of the problem.
          minimum: 100
          maximum: 600
          exclusiveMaximum: true
          example: 503
        detail:
          type: string
          description: >-
            A human readable explanation specific to this occurrence of the
            problem.
          example: Connection to database timed out
        instance:
          type: string
          format: uri
          description: >-
            An absolute URI that identifies the specific occurrence of the problem.
     #Fare-specific elements begin
    FareOnlineDef:
      type: object
      properties:
        id:
          description: unique id of the fare item to be included in accountings
          type: string
        type:
          $ref: '#/components/schemas/FareTypeDef'
        name:
          $ref: '#/components/schemas/TextDef'
        fareDetailDescription:
          $ref: '#/components/schemas/TextDef'
        price:
          type: array
          items:
            $ref: '#/components/schemas/CurrencyPriceDef'
        regionalConstraint:
          $ref: '#/components/schemas/RegionalConstraintDef'
        serviceConstraint:
          $ref: '#/components/schemas/ServiceConstraintDef'
        carrierConstraint:
          $ref: '#/components/schemas/CarrierConstraintDef'
        serviceClass:
          $ref: '#/components/schemas/ServiceClassDef'
        serviceLevel:
          $ref: '#/components/schemas/ServiceLevelDef'
        reservationParameter:
          $ref: '#/components/schemas/ReservationParameterDef'
        personalDataConstraint:
          $ref: '#/components/schemas/PersonalDataConstraintDef'
        passengerConstraint:
          $ref: '#/components/schemas/PassengerConstraintDef'
        afterSalesCondition:
          $ref: '#/components/schemas/AfterSalesConditionDef'
        combinationConstraint:
          $ref: '#/components/schemas/FareCombinationConstraintDef'
        fullfillmentConstraint:
          $ref: '#/components/schemas/FullfillmentConstraintDef'
        reductionConstraint:
          $ref: '#/components/schemas/ReductionConstraintDef'
        legacyAccountingIdentifier:
          description: identifier of the fare in the current 301 accounting file data
          type: object
          properties:
            serialId:
              description: sequential number of regional validities
              type: integer
              minimum: 0
              maximum: 99999
            addId:
              description: sequential number of regional validities (leading positions in case the series is too short
              type: integer
              minimum: 0
              maximum: 99
            tariffId:
              description: sequential number of the fares for one regional validity
              type: integer
              minimum: 0
              maximum: 9999
          additionalProperties: false
        travelValidityConstraint:
          $ref: '#/components/schemas/TravelValidityConstraintDef'
      required:
        - id
        - type
      additionalProperties: false
    CalendarDef:
      type: array
      items:
        $ref: '#/components/schemas/DateTime'
    TravelValidityConstraintDef:
      type: object
      properties:
        id:
          description: mandatory in bulk data exchange
          type: string
        validTravelDates:
          $ref: '#/components/schemas/CalendarDef'
        validityRange:
          type: object
          properties:
            timeUnit:
              description: 'DAYS, HOURS, MINUTES'
              type: string
            value:
              type: number
            hoursAfterMidnight:
              description: validity extended after midnight
              type: number
          required:
            - timeUnit
            - value
          additionalProperties: false
        excludedTimeRange:
          description: time ranges excluded from the validity (e.g. off peak tickets)
          type: array
          items:
            type: object
            properties:
              from:
                description: minutes of the day in the time zone of travel
                type: integer
              until:
                description: minutes of the day in the time zone of travel
                type: integer
              scope:
                description: 'START_OF_TRAVEL,COMPLETE_RANGE'
                type: string
            required:
              - from
              - until
              - scope
            additionalProperties: false
        numberOfTravelDays:
          description: number of allowed travel days (e.g. 3 travel days within 2 weeks)
          type: integer
        returnConstraint:
          description: a return trip with the same carrier must be sold in combination
          type: object
          properties:
            latestReturn:
              description: 'number of days after departure or start of validity of the last return '
              type: integer
            earliestReturn:
              description: number of days after departure or start of validity of the earliest return
              type: integer
            excludedWeekdays:
              description: 'weekdays (ISO day of the week, 1 = Monday) between travel and return where travel is not allowed'
              type: array
              items:
                type: integer
          required:
            - latestReturn
            - earliestReturn
          additionalProperties: false
      required:
        - validityRange
      additionalProperties: false
    TravelerTypeDef:
      description: Values from the traveler type code list IRS 90918-10
      type: string
    PassengerConstraintDef:
      type: object
      properties:
        id:
          type: string
        passengerType:
          description: see code list travelerType
          type: string
        nameRef:
          type: string
        upperAgeLimit:
          type: integer
        lowerAgeLimit:
          type: integer
        ageLimitToTravelAlone:
          type: integer
        ageLimitForReservation:
          type: integer
        isAncilliaryItem:
          description: 'to indicate dogs, bicycles,.. '
          type: boolean
          default: false
        combinationConstraint:
          type: array
          items:
            type: object
            properties:
              maxNumber:
                description: number of passengers allowed per accompanying passenger
                type: integer
              passengerTypeRef:
                $ref: '#/components/schemas/TravelerTypeDef'
            required:
              - maxNumber
              - passengerTypeRef
            additionalProperties: false
        includedFreePassenger:
          type: array
          items:
            type: object
            properties:
              number:
                description: number of passengers that can be included with one passenger for free. The number is given in fractions. The calculation needs a precision of 1 digit fraction (e.g. with 0.33 dogs you need 3 adults to transport one dog for free)
                type: integer
              passengerTypeRef:
                $ref: '#/components/schemas/TravelerTypeDef'
            additionalProperties: false
        passengerWeight:
          type: number
        maxWeightedPasseners:
          description: 'the total weighted number of passengers on the offer is restricted to be equal or smaller than this  maximum '
          type: number
        minWeightedPassengers:
          description: the total weighted number of passengers on the offer is restricted to equal or larger than this minimum
          type: number
      required:
        - id
        - passengerType
        - nameRef
      additionalProperties: false
    ReductionConstraintDef:
      type: object
      properties:
        id:
          description: in bulk data only
          type: string
        requiredCards:
          description: 'one of the listed cards is required to be valid at the time of travel. '
          type: array
          items:
            $ref: '#/components/schemas/ReductionCardReferenceDef'
      required:
        - requiredCards
      additionalProperties: false
    CompanyDef:
      description: RICS company code or the upcoming compatible ERA company code. In case proprietary codes are used on a bilateral base the codes must have at least 5 positions and start with x
      type: string
    FareCombinationModelDef:
      type: object
      properties:
        model:
          description: 'SEPARATE_TICKET.SEPARATE_CONTRACT,CLUSTERING,COMBINING'
          type: string
        combinableCarrier:
          description: 'list of all carriers where the model can be applied, in case the list is empty all combinations are allowed.'
          type: array
          items:
            $ref: '#/components/schemas/CompanyDef'
        onlyWhenCombined:
          description: this combination model applies only in case the fare is combined with another carrier
          type: boolean
          default: false
        referenceCluster:
          description: 'in case of CLUSTERING model: the cluster to which the fare belongs'
          type: string
        allowedClusters:
          description: 'in case of CLUSTERIMNG model: the other clusters taht allow a combination'
          type: array
          items:
            type: string
        allowedAllocators:
          description: list of allowed allocators. in case the list is empty all allocators with a sales contract are permitted.
          type: array
          items:
            $ref: '#/components/schemas/CompanyDef'
        allowedCommonContracts:
          description: 'list of carriers where a common contract with separate tickets are allowed. '
          type: array
          items:
            $ref: '#/components/schemas/CompanyDef'
      required:
        - model
      additionalProperties: false
    FareCombinationConstraintDef:
      type: object
      properties:
        id:
          type: string
        combinationModels:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/FareCombinationModelDef'
      required:
        - id
        - combinationModels
      additionalProperties: false
    AfterSalesConditionDef:
      type: object
      properties:
        id:
          type: string
        afterSalesRules:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/AfterSalesRuleDef'
      required:
        - id
        - afterSalesRules
      additionalProperties: false
    PriceDef:
      type: object
      properties:
        id:
          description: required for bulk data transfer
          type: string
        price:
          type: array
          items:
            $ref: '#/components/schemas/CurrencyPriceDef'
      required:
        - price
      additionalProperties: false
    RelativeTimeDef:
      type: object
      properties:
        timeUnit:
          description: 'MINUTES,DAYS,HOURS'
          type: string
        timeValue:
          type: integer
        timeReference:
          description: 'BEFORE_DEPARTURE,AFTER_DEPARTURE,AFTER_SALE,BEFOR_START_VALIDITY,AFTER_END_VALIDITY'
          type: string
      required:
        - timeUnit
        - timeValue
        - timeReference
      additionalProperties: false
    AfterSalesRuleDef:
      type: object
      properties:
        transactionType:
          description: code list Reason for after sale
          type: string
        feeRef:
          description: reference to a price data item defining the fee; optional in case there is no fee but the after sales transaction is allowed. Online services will include fee directly in the fee tag
          type: string
        fee:
          $ref: '#/components/schemas/PriceDef'
        applicationTime:
          $ref: '#/components/schemas/RelativeTimeDef'
        applicationTimeStamp:
          description: absolute application time (UTC) in case of online serices
          type: string
          format: date-time
        carrierFee:
          description: indicates that the fee belongs to the carrier
          type: boolean
          default: true
        individualContracts:
          description: indicates that the after sales of this fare can be treated independently per person.
          type: boolean
          default: false
      required:
        - transactionType
      additionalProperties: false
      
    RegionalValidityDef:
      type: array
      items:
        description: 'one of the elements Zone,ViaStation,TrainLink, Line, Polygone'
        type: object
        properties:
          seqNb:
            description: order number of the list item
            type: integer
          zone:
            $ref: '#/components/schemas/ZoneDef'
          viaStations:
            $ref: '#/components/schemas/ViaStationsDef'
          trainLink:
            $ref: '#/components/schemas/TrainLinkDef'
          line:
            $ref: '#/components/schemas/LineDef'
          polygone:
            $ref: '#/components/schemas/PolygoneDef'
        additionalProperties: false
    LineDef:
      type: object
      properties:
        binaryLineId:
          type: integer
          format: Base64
          description: 'to support local traffic standards (e.g. VDV,...)'
        carrier:
          $ref: '#/components/schemas/CompanyDef'
        city:
          type: integer
        entryStation:
          $ref: '#/components/schemas/Station'
          description: Station  to enter the zone in case the product requires to enter the zone via a specific station (e.g. local zone ticket to start from the main rail station.
        lineId:
          type: array
          items:
            type: string
        terminalStation:
          $ref: '#/components/schemas/Station'
          description: Terminal station in case trhe  product requires a detination within the zone (e.g. local ticket to go to the main railstation)
        nutsCode:
          description: |-
            Nomenclature des units territoriales statistiques  
             COMMISSION REGULATION (EU) No 31/2011
          type: string
      required:
        - carrier
      additionalProperties: false
    TrainLinkDef:
      type: object
      properties:
        fromStation:
          $ref: '#/components/schemas/Station'
        toStation:
          $ref: '#/components/schemas/Station'
        train:
          type: string
        travelDate:
          $ref: '#/components/schemas/DateTime'
          description: date and time of the departure where the train link starts
      required:
        - fromStation
        - toStation
        - train
        - travelDate
      additionalProperties: false
    PolygoneDef:
      type: object
      properties:
        edge:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/GeoCoordinate'
      additionalProperties: false
    ViaStationsDef:
      type: object
      properties:
        isBorder:
          type: boolean
        routeId:
          type: integer
        seriesId:
          type: integer
        alternativeRoute:
          type: array
          items:
            $ref: '#/components/schemas/ViaStationsDef'
        carrier:
          $ref: '#/components/schemas/CompanyDef'
        route:
          type: array
          items:
            $ref: '#/components/schemas/ViaStationsDef'
        serviceBrand:
          description: restriction  to a specific service brand
          type: string
        Station:
          $ref: '#/components/schemas/Station'
        fareReferenceStationSet:
          description: reference to a list of stations included in the fare
          type: object
          properties:
            carrier:
              $ref: '#/components/schemas/CompanyDef'
            code:
              type: string
            name:
              type: string
          required:
            - carrier
            - code
          additionalProperties: false
      required:
        - Station
      additionalProperties: false
    ZoneDef:
      type: object
      properties:
        binaryZoneId:
          type: integer
          format: Base64
          description: 'to support local traffic standards (e.g. VDV,...)'
        carrier:
          $ref: '#/components/schemas/CompanyDef'
          description: carrier responsible for the transport.
        city:
          type: integer
        entryStation:
          $ref: '#/components/schemas/Station'
          description: Station  to enter the zone in case the product requires to enter the zone via a specific station (e.g. local zone ticket to start from the main rail station.
        terminalStation:
          $ref: '#/components/schemas/Station'
          description: Terminal station in case the  product requires a destination within the zone (e.g. local ticket to go to the main railstation)
        zoneId:
          description: to be used in bar codes
          type: array
          items:
            type: integer
        nutsCode:
          description: Nomenclature des units territoriales statistiques COMMISSION REGULATION (EU) No 31/2011
          type: string
      required:
        - carrier
      additionalProperties: false
    FullfillmentConstraintDef:
      type: object
      properties:
        id:
          type: string
        acceptedFullfillmentTypes:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/FulfillmentTypeDef'
        acceptedBarCodes:
          description: for SiD fulllfillment one of the listed bar codes is required
          type: array
          items:
            description: 'according IRS 90918-9: FCB, TLB, SSB'
            type: string
        requiredBarCodes:
          description: one of the listed bar codes must be provided
          type: array
          items:
            type: string
        requiredSiS:
          description: for SiS fullfillment one of the listed interfaces is required
          type: array
          items:
            description: registry90918-4;peertopeer90918-4
            type: string
        individualTicketingPermitted:
          description: a seprate fullfillment per traveler is permitted
          type: boolean
      required:
        - id
        - acceptedFullfillmentTypes
        - individualTicketingPermitted
      additionalProperties: false
    PersonalDataConstraintDef:
      type: object
      properties:
        id:
          type: string
        requiredData:
          type: array
          minItems: 1
          items:
            type: object
            properties:
              dataItem:
                description: see code list IRS 90918-10
                type: string
              transfer:
                description: 'BOOKING,SIS_CONTROL,SID_CONTROL'
                type: array
                minItems: 1
                items:
                  type: string
              ticketHolderOnly:
                type: boolean
                default: false
              crossBorder:
                description: the dara are required only in case one of the cross border conditions apply
                type: array
                items:
                  $ref: '#/components/schemas/CrossBorderConditionDef'
              fulfillmentType:
                description: type of fulfillment in case the presonal data are required for that type only
                type: array
                items:
                  $ref: '#/components/schemas/FulfillmentTypeDef'
            required:
              - dataItem
              - transfer
            additionalProperties: false
        allowedChanges:
          type: array
          items:
            type: object
            properties:
              acceptedReason:
                description: 'IN_GENERAL,MARRIAGE,DOCUMENT_CHANGE,AGENT_ERROR'
                type: string
              timeLimit:
                description: the change is limited to n hours after booking confirmation
                type: number
            required:
              - acceptedReason
            additionalProperties: false
      additionalProperties: false
    CrossBorderConditionDef:
      type: object
      properties:
        fromCountry:
          $ref: '#/components/schemas/CountryDef'
        toCountry:
          $ref: '#/components/schemas/CountryDef'
        affectedServiceBrands:
          type: array
          items:
            $ref: '#/components/schemas/ServiceBrandCodeDef'
      additionalProperties: false
    CountryDef:
      description: 'ISO 3166 2A codes, optional in case of web sales'
      type: string
    FulfillmentTypeDef:
      description: SIP - secure paper tickets; SID - security in data (signed bar code); SIS - security in system
      type: string
      enum:
        - SIP
        - SID
        - SIS
    ReservationParameterDef:
      type: object
      properties:
        id:
          type: string
        reservationRequired:
          type: boolean
          default: false
        reservationParams918-1:
          type: object
          properties:
            travelClass:
              description: '90918-1 class code in reservation '
              type: string
            serviceLevelCode:
              description: service level code defined in UIC 90918-1
              type: string
            serviceCode:
              description: service code to be used in reservation
              type: string
            berthType:
              type: string
            coachTypeCode:
              type: string
            compartmentTypeCode:
              type: string
            tariff:
              type: string
          required:
            - travelClass
            - serviceLevelCode
            - serviceCode
          additionalProperties: false
        reservationOptions:
          $ref: '#/components/schemas/ReservationOptionsDef'
        reservationRequiredForBrand:
          description: service brand mode for which a reservation is mandatory
          type: array
          items:
            type: integer
        reservationRequiredForMode:
          description: service service mode for which a reservation is mandatory
          type: array
          items:
            type: string
      required:
        - id
      additionalProperties: false
    ReservationOptionsDef:
      type: object
      properties:
        preferences:
          description: possible preferences to be requested in reservation without changing the fare
          type: array
          items:
            $ref: '#/components/schemas/ReservationOptionGroupDef'
        graficalReservation:
          description: 'grafical reservation is supported, interface type "NO","UIC_918",..'
          type: string
        serviceBrands:
          description: service brands where the options apply
          type: array
          items:
            $ref: '#/components/schemas/ServiceBrandCodeDef'
      additionalProperties: false
    ReservationOptionGroupDef:
      type: object
      properties:
        preferenceGroup:
          type: string
        preference:
          type: array
          minItems: 1
          items:
            type: string
      additionalProperties: false
    CarrierConstraintDef:
      type: object
      properties:
        id:
          type: string
        includedCarrier:
          type: array
          items:
            type: string
        excludedCarrier:
          type: array
          items:
            type: string
      additionalProperties: false
    ServiceClassIdDef:
      description: 'Service class id. Values according to code list IRS 90918-10  (A,B,C,D)'
      type: string
    ServiceLevelDef:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ServiceLevelIdDef'
        combiningServiceClasses:
          description: list of service class ids that can be combined with these service levels
          type: array
          items:
            $ref: '#/components/schemas/ServiceClassIdDef'
        textRef:
          description: id of the text describing the service level
          type: string
        text:
          $ref: '#/components/schemas/TextDef'
        includesClassName:
          description: indicates that the class name is included
          type: boolean
          default: true
        reservationParameterId:
          type: string
      required:
        - id
      additionalProperties: false
    ServiceConstraintDef:
      description: one of the lists of exclueded or included service brands only
      type: object
      properties:
        id:
          type: string
        includedServiceBrands:
          type: array
          items:
            $ref: '#/components/schemas/ServiceBrandCodeDef'
        excludedServiceBrands:
          type: array
          items:
            $ref: '#/components/schemas/ServiceBrandCodeDef'
      required:
        - id
      additionalProperties: false
    FareTypeDef:
      description: 'basic UIC fare types (used in 90918-10, 90918-4, 90918-9)'
      type: string
      enum:
        - 'NRT, IRT, NON_RESERVATION'
        - INTEGRATED_RESERVATION
        - RESERVATION
        - ANXILLIARY
    RegionalConstraintDef:
      type: object
      properties:
        id:
          type: string
        entryConnectionPointId:
          description: connection point connecting two fare regimes
          type: string
        exitConnectionPointId:
          description: connection point connecting two fare regimes
          type: string
        RegionalValidity:
          $ref: '#/components/schemas/RegionalValidityDef'
        distance:
          description: 'distance in km for statistics '
          type: number
      additionalProperties: false
    TranslationDef:
      type: object
      properties:
        language:
          type: string
        textUTF8:
          type: string
        text:
          description: text without special characters according to ICAO specification
          type: string
        shortTextUtf8:
          type: string
        shortText:
          description: text without special characters according to ICAO specification
          type: string
      required:
        - language
        - textUTF8
        - text
      additionalProperties: false
    TextDef:
      description: directly included text in case of online services
      type: object
      properties:
        id:
          type: string
        textUTF8:
          type: string
        translations:
          type: array
          items:
            $ref: '#/components/schemas/TranslationDef'
        text:
          description: text without special characters according to ICAO specification
          type: string
        shortTextUtf8:
          type: string
        shortText:
          description: text without special characters according to ICAO specification
          type: string
      required:
        - id
        - textUTF8
        - text
      additionalProperties: false
    #Fare-specific elements end
   